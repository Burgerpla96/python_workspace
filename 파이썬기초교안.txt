[파이썬이란?]

	-네덜란드의 귀도 반 로섬(Guido van Rossum)이 1989년 개발한 객체지향 프로그래밍 언어이다.
	
	-파이썬이라는 이름은 귀도가 즐겨 봤던 코미디 프로그램인 몬티 파이썬의 날아다니는 써커스 
	 <Monty Python's Flying Circus>에서 따왔다고 한다.
	-파이썬의 사전적인 의미는 고대 신화에 나오는 파르나소스 산의 동굴에 살던 큰 뱀을 뜻하는데
     파이썬 책 표지와 아이콘이 뱀 모양으로 그려져 있는 이유가	여기에 있다.
	-파이썬은 스크립트 언어이다. 즉 컴파일을 하지않고 한 줄 단위로 실행되기 때문에 쉽게 결과를 확인할 수 있다.  
	-파이썬은 문법이 매우 쉽고 간단해서 프로그래밍 입문자들이 쉽게 배울 수 있다는 특징을 가진다
	 
	-문법이 간단한데다 다양한 패키지가 제공되어 생산성이 높고, 유지 보수 비용이 적게 든다는 점 때문에 
	 널리 쓰이는 언어로 자리잡았다. 또한 과학 계산에 특화된 패키지도 준비되어 있어서 과학, 공학 연구 
	 분야에서도 활발히 사용되고 있다.
	-numpy (과학 계산에 특화된 패키지): 미분 개념, 선형 대수 공부 필요
	
	-파이썬과 파이썬의 패키지는 오픈 소스이며 모두 무료로 제공되고 있다
	
	-공식 사이트 : https://www.python.org/
	-Anaconda 를 사용할 수 도 있다.	
	 numpy(수치분석), pandas(데이터 분석), python, 시각화 툴이 같이 깔린다.
	
	
[파이썬 개발환경구축]



	1. https://www.python.org/ 사이트에서 다운로드후 설치
	   ※Add Python 3.6 to PATH 체크 - 체크시 환경변수 PATH에 파이썬 인터프리터의 경로가 등록됨.
		//컴파일을 거치지 않는다.
	   ※Disable path length limit를 클릭. 
	     Windows는 파일 이름과 경로의 길이가 260자로 제한되어 있다. 
		 260자를 넘더라도 문제가 발생하지 않도록 길이 제한을 해제하자.
    
	   ※설치시 아래경로에 설치된다.
		32비트인 경우
		C:\Users\<사용자이름>\AppData\Local\Programs\Python\Python36-32\
		64비트인 경우
		C:\Users\<사용자이름>\AppData\Local\Programs\Python\Python36\
		위 경로에 파이썬 인터프리터가 설치돠고 하위 디렉토리인 Scripts\ 에
		pip프로그램이 설치된다.
		
		※Python 3 에서는 .py 스크립트 파일의 기본 인코딩이 UTF-8이다
	
	2. 설치확인 및 테스트 코드 작성
       콘솔창에서 dos> python
		Python 3.6.5 (v3.6.5:f59c0932b4, Mar 28 2018, 16:07:46) [MSC v.1900 32 bit (Intel)] on win32
		Type "help", "copyright", "credits" or "license" for more information.
		>>>print('Hello World')
	   혹은 
	   시작 -> Python 3.6 -> IDLE (Python 3.6 32-bit)실행
	 
	
	※이클립스로 개발환경 구축하기
	
		1.https://www.eclipse.org에서 Eclipse IDE for Java EE Developers다운
		2.PyDev 플러그인 설치
		  2-1. 이클립스  help->Eclipse Marketplace클릭
	           find창에서 python으로 검색
		  2-2. 검색된 목록 중 PyDev를 설치후 이클립스 재시작(자동)
		  2-3. 이클립스와 파이썬 연결
			   Window ->Preference ->PyDev ->Interpreters->Python Interoreter클릭
			   Quick Auto-Config클릭하여 파이썬 인터프리터의 위치설정
		  2-4. 퍼스펙티브를 PyDev로 변경후 new->PyDev  project생성후
			   new -> PyDev Module 로 .py생성 혹은
			   new->File  파일 생성(확장자는 .py)후 파이썬 코드 작성
			   Run As -> Python Run 으로 테스트

		※파이썬의 종류
			1. Cpython : C 로 구현된 기본적인 파이썬으로 일반적으로 파이썬이라고
			             하면 Cpython을 의미한다
			2. Jython :  Java 로 구현된 파이썬으로 JVM에서도 실행이 가능하다.
			3. IronPython : C#으로 구현된 파이썬
			4. PyPy : 파이썬으로 구현된 파이썬
			
		※파이썬 2.x버전과 3.x버전의 주요 차이점
			1. 파이썬 3.x 버전에서는 모든 변수가 객체(Object)로 처리된다.
			2. 파이썬 3.x 버전에서는 print문이 괄호가 필수이다
			3. 파이썬 3.x 버전에서는 long 형이 없어지고 <class 'int'>로 변경되었다
			   -파이썬 2.x버전
				type(2**10) : <type 'int'>
				type(2**100): <type 'long'>
			   -파이썬 3.x버전
				type(2**10) : <class 'int'>
				type(2**100): <class 'int'>
			4. 파이썬 3.x 버전에서는 int/int(나누기) 연산 결과는 float으로 처리된다
			   -파이썬 2.x버전
                1/2 : 0
                type(1/2): <type 'int'>
               -파이썬 3.x버전
                1/2 : 0.5
                type(1/2): <class 'float'>
			5. 파이썬 3.x 버전에서는 문자열이 항상 유니코드로 처리되므로 u 표기 필요없음
			   -파이썬 2.x버전
                type('안녕')  : <type 'str'>
				type(u'안녕') : <type 'unicode'>
               -파이썬 3.x버전
                print(type('안녕')) : <class 'str'>
				print(type(u'안녕')) : <class 'str'>
 
	※파이참-https://www.jetbrains.com/pycharm/download/

	
	
[파이썬 코드 실행]			

	1. 파이썬 쉘 프로그램으로 실행
	     -대화형식이라고 하며 짧은 파이썬 코드를 파이썬 인터프리터로 직접 실행시키는 방법이다
		 -파이썬 쉘 프로그램이 파이썬 인터프리터와 대화 나누듯이 실행한다 하여 대화형 쉘이라고 하며
		  REPL(Read-Eval-Print Loop:읽기-실행-인쇄 루프)방식이라고도 한다 
		 -파이썬 쉘 프로그램을 실행시키려면 콘솔창에서 python을 입력하서나 
		  혹은 시작 -> Python 3.6 -> IDLE(Python Shell프로그램)실행한다
		  그러면 파이썬 프롬프트(">>>")가 나타난다.
		  그리고 나서 ">>>" 다음에 실행하려는 파이썬 코드를 입력한 후 엔터키를 누르면 바로 
		  실행되어 결과를 얻을 수 있다.
		  ※콘솔창의 명령 프롬프트에서 파이썬 셸을 끝내려면 exit()를 입력하거나 Ctrl+Z를 누른후 엔터키를 친다
		  
	2. 파이썬 스크립트(Python Script: 확장자는 .py)
	
		 -파이썬 코드가 긴 경우 파이썬 코드를 저장한 .py 파일(파이썬 스크립트라고 한다)로 실행시키는 것이
		  REPL방식 즉 파이썬 쉘 프로그램보다는 효율적이다.
         -파이썬 코드를 일반 텍스트 편집기로 작성후 파일로 저장하여 콘솔의 프롬프트에서 
		  "python 스크립트파일명.py"로 실행시키거나
		  혹은 IDLE에서 File -> New File 로 파일 작성후 File -> Save메뉴로
		  저장후 Run -> Run Module(F5)로 실행시킨다.

		※파이썬 스크립트(.py파일)에 한글이 포함된 경우 
		 SyntaxError: Non-UTF-8 code starting with~에러가 발생하거나 한글이 깨지는 경우
		 소스 코드 맨앞에 #coding:utf-8 이라고 선언해 준다

[파이썬 기초 문법]	
	1. 파이썬은 대소문자를 엄격히 구별하고 변수 선언시 자료형(Data Type) 선언이 없다.
   

	2. 세미콜론 : 
			-파이썬은 다른 언어와 다르게 문장의 종료를 나타내기 위해 세미콜론(;)을 붙이지
	         않는다.(단, 붙여도 에러는 나지 않는다)
			-파이썬은 엔터키로 명령문의 끝을 구분하며, 다른 언어와 다르게 한 줄에 한 명령문만 가능하다.
			 단, 한줄에 여러 명령문을 나열할때는 세미콜론으로 구분한다.
			예]
				두 줄에 두개의 명령문 입력(엔터로 명령의 끝 구분)
				a=10
				print(a)
				혹은 한줄에 두 개의 명령문 입력
				a=10;print(a)
				 
	3. 들여쓰기 : 	
			-파이썬은 들여쓰기 자체가 문법이다. 그래서 들여쓰기를 하지 않는 경우
			 에러가 발생한다.
			예]
				IndentationError : expected an indented block발생하는 경우
				for i in range(10):
				
				print(i)
				
				아래는 정상적으로 코드가 실행된다
				for i in range(10):
					print(i)
			즉 파이썬는 {}를 사용하여 코드의 블록을 지정하지 않고 들여쓰기(Indentation)을 사용하여
			코드의 블록을 지정한다.
			-들여쓰기 간격은 공백 2칸, 공백 4칸, 탭 문자등 어느 것을 사용해도 무방하나
             공백 4칸을 권장하고 있다.
			 
			-코드불럭을 지정할때 코드블럭의 시작코드에는 콜론(:)을 붙이고 내부의 코드에는
             동일한 크기의 들여쓰기를 지정해야 한다
             또한 공백과 탭 문자를 섞어 쓰면 안 된다.
			 예]
			 a=10
			 if a > 10 : #if 코드불럭 시작
				print('a는 10보다 크다')
			 else : #else코드불럭 시작
				print('a는 10보다 크지 않다')
	4. 주석 :
	
			- 파이썬 인터 프리터에 의해 실행되지 않는 즉 무시되는 문장이다.
			- 주로 코드에 대한 설명글을 달거나 혹은 임시로 실행되지 않는 코드를 만들때 사용한다
            - 일반적인 주석을 표시할때 #을 사용한다
			- #!는 주석문으로 실행하는 인터프리터를 의미하며
			  이 부분을 셔뱅(shebang)이라고 한다. 셔뱅은 현재 파일을 실행해 줄 프로그램을 지정할 때 
			  사용한다. 즉, 셔뱅에 파이썬 경로를 지정해 놓으면 해당 파이썬으로 .py 파일을 실행한다.
				예]
				아래 주석문을 스크립트 파일 맨 첫줄에 작성한다.
				#!/usr/bin/env python3
				환경 변수에 지정된 경로에서 python3 프로그램을 찾아서 실행한다는 의미이다
				단,윈도우 환경에서는 의미없다.
			- '''혹은 """은 독스트링(문서화 문자열, documentation strings, docstrings) 혹은  블록 코멘트라고 하는데 #(주석)처럼
			  인터프리터에 의해 무시되지는 않는다 즉 하나의 명령문으로 처리하나
			  이 '''혹은 """사이에 여러줄 주석처럼 아무 문장이나 쓸 수 있다.
			  단,들여쓰기 레벨에 맞아야 한다.	
			  예]
			  if True :
				 '''
				 if문 블락입니다
				  여기에 어떠한 주석문도 가능합니다
				 '''
				 print('무조건 실행되는 명령문')
			 
			 ※파이썬은 빈 클래스나 빈 함수를 만들수 없다.에러가 발생한다
              def hi(): #에러.빈 함수임
			  def hi(): #에러
				#함수  -> 인터프리터가 무시함 즉 빈 함수로 처리됨
              
			  def hi(): #정상
				'''함수'''  -> 인터프리터가 하나의 명령문으로 처리함 즉 빈 함수가 아님
			  def hi(): #정상
				pass
[변수]
	-변수란:메모리상의 임시 데이터 저장 공간의 이름
	-변수 생성 : 
				방법1]변수명 = 데이터 
                     단,변수명만 선언시는 name '변수명' is not defined 에러 발생
					 ※빈 변수(값이 들어있지 않은 변수) 선언은 
					  변수명 = None 으로 한다
					  None은 파이썬의  자료형(<class 'NoneType'>)으로 다른 언어의
					  null과 같다
					  
				방법2]변수명1, 변수명2, 변수명3 = 데이타1, 데이타2, 데이타3 
				     단,변수와 데이타의 개수는 동일하게 맞춰주어야 하며 나열된 순서대로 값이 할당된다.
					 만약 변수와 값의 개수가 맞지 않으면 에러가 발생한다. 
					 
				방법3]변수명1 = 변수명2 = 변수명3 = 데이타
                     변수 여러개가 모두 같은 값을 갖는 경우 사용한다.				
			  
	-변수명 명명규칙 :
		1. 영문 혹은 언더바(_)로 시작해야 한다.숫자로 시작해서는 안된다.
		2. 대소문자를 구분한다.
		3. 특수 문자(+, -,$, @, &등)는 사용할 수 없다.
		4. 유니코드로도 만들 수 있다.(예: 한글=1)
		5. 키워드(예약어)는 사용할 수 없다.
		   -키워드 목록 확인
		   >>> import keyword
		   >>> keyword.kwlist
	-변수의 자료형(Data Type) : 변수가 담을수 있는 값의 종류
	
	----------+------------------------------------------+----------------------------------------
	 종 류                  설 명                              예
    ----------+------------------------------------------+----------------------------------------
	수치형     정수(int),실수(float),복소수(complex)를     100,0x1a, 0o17,3.14
	           나타내는 자료형                             3+4j(복소수)
	----------+------------------------------------------+----------------------------------------
	문자열        일련의 문자들이 나열된 것을 의미         "Hello World",'Hello World'
	                                                       '''Hello World''',
												           """Hello World"""	
	----------+------------------------------------------+----------------------------------------
	리스트      파이썬에서 가장 많이 사용되는              [1,2,3,4,5],['김길동', 20, '나길동', 30]
	            자료형으로 순서가 있다                     ['김길동',[20, '서울'],'나길동',[30,'부산']]
	            숫자,문자열,리스트,튜플,딕셔너리     
				등의 원소를 모두 포함할 수 있으며, 
				대괄호로 묶어 표현
	----------+-----------------------------------------+----------------------------------------
	튜플        리스트와 유사하게 데이터를 순서대로       (1,2,3,4,5),('김길동', 20, '나길동', 30)
	            저장할 수 있는 자료구조다                 ('김길동',[20, '서울'],'나길동',[0,'부산'])
	            단,리스트와 달리 튜플은 한번 만들어지면 
				수정할 수 없다.                     
	            튜플은 수정할 수 없기 때문에 리스트보다 빠르다    
				괄호로 묶어 표현.
	----------+-----------------------------------------+----------------------------------------
	딕션너리       Key-Value형식으로 표현되는 자료형      {name:'홍길동',age:20,'주소':'강남'}	
                   순서가 없다	
	----------+-----------------------------------------+----------------------------------------
	 집합       파이썬 2.3부터 지원되기 시작한 자료형     {'설악산', '한라산', '소백산', '태백산'}
	            으로 순서가 없다.
				중복을 허용하지 않는다.
				set()함수로 집합 생성	
	----------+-----------------------------------------+----------------------------------------
	논리형      참 ,거짓을 나타내는 자료형                True, False
	----------+-----------------------------------------+----------------------------------------
	None       아무 데이타를 갖지 않는다는 것을 표현하는  None
               것으로 타 언어의 null과 같은 개념
	----------+-----------------------------------------+----------------------------------------
    ※리스트,튜플,딕션너리,집합등을 순서형 자료(혹은 반복가능한 객체)라고 하는데  다른 객체들을 담을 수 있는 
	  컨테이너(컬렉션)를 의미하기도 한다
	  또한 순서형 자료를 이터레이터라고도 한다
	  이는 컨테이너(컬렉션)에서 객체들을 하나 하나씩 꺼낼 수 있는 타입을 의미한다
	
	-변수 삭제: 변수 삭제는 del을 사용한다.(리스트를 사용할 때 유용하게 쓰임)

	※파이썬은 변수뿐만 아니라 값 자체도 객체이다. 그래서 변수에 값을 그대로 할당하지 않고 
	 객체를 가리키는 방식을 사용한다.
	 1이나 2와 같은 값처럼 자주 사용하는 숫자는 sys.getrefcount()함수로 
	 최초 참조횟수를 얻어오면 다른 숫자값에 비해 훨씬 크다
	 왜냐하면 파이썬 내부에서도 1이나 2를 사용하고 있기 때문이다.
	 
	 
	※상수: 파이썬에서 상수를 선언할 수 없다.다른 언어처럼 키워드가 없다
	 
[이스케이프 시퀀스]	 
	-특정 형식에 맞게 출력하기 위해 사용하는 문자로 특정 문자 앞에 \을 붙이면 
	그 특정문자는 어떤 특수한 기능음 함.
	예] "HitHomeRun" => 여기서 t는 일반 문자를 의미
	    "Hi\tHomeRun" =>여기서 t는 \와 결합해서 탭만큼 띄어쓰는
	                     기능을 하는 이스케이프 문자가 됨.
	-주요 이스케이프문자
		 \n: 줄 바꿈,그리고 커서는 줄바꿈한 줄의 처음에 위치
		 \t: 탭키만큼 들여쓰기,즉 스크린 커서를 탭키만 큼 옮김
		 \r: 캐리지리턴(동일한 줄의 맨 앞으로 커서 옮김,줄바꿈은 안됨) 
			 콘솔에서 테스트 해야함,이클립스에서는 \r과 \n이 동일한 결과를 내보냄
			 

		*키보드의 엔터키는 \r\n임 
		\': 작은 따옴표 문자 자체 표현
		\": 큰따옴표 자체 문자 표현
		\\:백슬래시(\)기호 자체 *이클립스에서는 \로 보이는 경우 window->preference->general->color and fonts->basic->text fonts->굴림체로


[형식 문자열]

	-Format String:출력형식을 지정하기 위한 형식 문자열

	형식1] "형식문자열" % "값"  형식
			 % 앞 부분은 포맷 문자열이고, % 뒤는 실제 대입할 값이다.
			 이때 % 를 포맷팅 연산자(Formatting Operator)라 부른다. 
			 만약 % 뒤의 값이 복수 개이면 튜플로 묶어주어야 한다. 
		 
			 예] 
				 name ='이름은  %s입니다' % '김길동'
				 print(name)
				 person = '이름:%s,나이:%d' % ('김길동',20)
				 print(person)   
				 예 에서 %s나 %d등을 변환 지시자(Conversion Specifier)라고 한다\
				 
				 주요 변환 지시어]
				 %d 또는 %i:정수값 출력시
				 %f 또는 %F:실수값 출력시
				 %c:한 문자 출력시
				 %o 또는 %O:8진수 출력시
				 %x 또는 %X:16진수 출력시      
				 %s:문자열 혹은 파이썬 객체를 str()을 사용하여 변환한 경우
				 %r:문자열 혹은 파이썬 객체를 repr()을 사용하여 변환한 경우    
				 %%: %리터럴을 의미
			  
	형식2] "형식문자열".format() 형식
			형식문자열 내의 변환 지시자의 형식은 {숫자}, {이름} 이다
		    ※ 숫자 사용시 숫자는 0부터 시작 그렇지 않으면 아래 에러 발생
		       IndexError: tuple index out of range
			   
			예]
			 name ='이름은 {0}이고 나이는 {1}살입니다'.format('김길동',20)
			 print(name)
			 person = '이름:{name},나이:{age}'.format(name='김길동',age=20)   
			 print(person) 
	
	-형식문자열에서 데이타 출력시 자릿수 지정 할수 있다
		
		%숫자format-string
		
		
		예]
		   %4c : 한문자를 출력하는 데 전체 자리수는 4
		   %5d: 정수 숫자를 출력하는 데 전체 자리수는 5
		   %6.2f%:실수를 출력하는데 
				  소수점 둘째짜리까지만 출력하고
				  전체 자리수는 6(소수점 포함)
			  
			  
		   자릿수 지정시 값을 오른쪽부터 채운다
		   -를 붙이면 왼쪽부터 채운다
		   예]
		   print("%4d" % 12);
		   _ _ 12
		   print("%-4d" % 12);
		   12_ _	

[연산자]

	-단항 연산자: 항이 하나인 연산자		
		부호연산자 : +  -
		논리 부정 연산자 : not

	2] 산술 연산자 :**(거듭제곱) * / //(버림 나눗셈 연산자) %(나머지 연산자) + -    

	3] 쉬프트연산자 : << , >>     

		-두항이 반드시 정수여야한다
		 정수 <<  비트수: 왼쪽으로 비트수만큼 이동하고 오른쪽에
						 남은 비트는 0으로 채운다

		 정수 >> 비트수 : 오른쪽으로 비트수만큼 이동하고
								  왼쪽에 남은 비트는 부호비트로 채운다(1:음수,0:양수)

	4] 비교 연산자 : <  <=  >  >=  != 

	5] 비트 연산자 : &(and)  ^(xor)  |(or)  ~(not)
			- 두항이 정수여야 한다.
			- 두 항이 정수값일때 비트 연산자로 사용됨
			  그렇지 않고 두항이 비교식일때는 논리연산자로 사용됨
			예]   3> 4 & 5 < 4 : &는 논리연산자
					4 & 5 : & 는 비트 연산자
			

			  - & : 비트 연산시 둘다 1일때만 1 아니면 0
			  - | : 둘중의 하나라도 1이면 1
			  - ^ : 서로 배타적일때 즉 서로 값이 다를때는 1 같으면 0
			  - ~ : 1이면 0 ,0이면 1
			
			예]	4: 0000 0100			
				5: 0000 0101
				-------------------
			   4&5  0000 0100 =>4
			   4|5   0000 0101 =>5
			   4^5   0000 0001 =>1


	6] 논리 연산자 : and or not  
	7] 할당 연산자 : =  +=  *=  /=  -=등


	[연산자 우선 순위]

	:()는 모든 연산자에 우선한다

	:연산자 우선 순위는 산술 > 비교 > 논리 연산자 순이다.

	같은 연산자 내에서도 우선 순위가 존재한다.
	또한 연산순위가 같은 항목들이 순서 대로 나열되어 있다면 왼쪽에서 오른쪽으로 연산자의 우선 순위를 결정한다. 

	:산술 연산자 내의 우선 순위 

	**(거듭제곱) > *(곱하기),/(나누기),//(버림),%(나머지)) > +(더하기)-(빼기)



	:비교 연산내의 우선순위 

	비교 연산자는 모두 우선순위가 같다 고로 여러 개의 비교 연산자가 사용되엇을 경우

	왼쪽에서 오른쪽으로 우선순위가 결정된다.

	:논리 연산내의 우선 순위 

	not(1) > and(2) > or(3)


[제어문]
	1. 조건문(분기문)-if문
			-프로그램 흐름상  어떤 조건에 따라 분기하고자 할때  즉 특정 조건에 따라 다른 코드를 
			실행하고자 할때 사용하는 제어문
			
			-if 문 형식에서 조건식은 비교식 내지 논리식 혹은 산술식등 모든식이 될 수있다.
			  즉 결과값이 True 아니면 False가 나오는 식이거나
			  직접값이나 변수가 될 수도 있다.
			-조건식 다음에는 반드시 :(콜론)을 붙인다
			-파이썬에서 :(콜론)이 나오면 그 다음 줄부터는 무조건 들여쓰기를 해야한다
			 들여쓰기로 if블락을 표시한다.
			 if 다음 줄에서 들여쓰기를 하지 않으면 들여쓰기 에러 발생
			 
			 또한 if 다음 줄에 아무 코드도 넣지 않으면 에러가 발생한다
             나중에 실행 코드를 작성하는 용도로 if 조건문의 형태를 유지하기 위해 
			 if 다음줄에 pass라는 키워드를 사용한다
			 예]
			 if 조건식:
				pass  #나중에 여기에 실행코드 작성
			 
			 pass는 말그대로 아무 일도 하지 않고 그냥 넘어간다는 뜻이다
			 
			 
			if문 기본형식 1]
			
			 
				 if 조건식:
					 조건식이 참일때 실행할 명령문	
				 
			
			if문 기본형식2]
				 if 조건식:
					조건식이 참일때 실행할 명령문
					
				 else:
					조건식이 거짓일때 실행할 명령문
			if문 기본형식3]
				
				 if(조건식1){
					조건식1이 참일때 실행할 명령문1				 
				 elif 조건식2:
					조건식2이 참일때 실행할 명령문2
				elif 조건식3:
					조건식3이 참일때 실행할 명령문3
				elif 조건식4:
					조건식4이 참일때 실행할 명령문4
				......
				elif 조건식 n:
					조건식n이 참일때 실행할 명령문n
				[
				else:
					모든 조건식이 거짓일때 실행할 명령문
				]
		
	2. 반복문-for문(구간반복),while문(조건반복)
		- 어떤 실행문장을 반복하고자 할때  사용하는 제어문으로 파이썬은 
		   다른 언어와 다르게 반복문은 두 가지로 한정되어 있다.
		   파이썬에서 지원하는 반복문에는 조건문이 참인가 거짓인가에 따라 반복을 진행하는 while문과
		   리스트나 튜플같은 순서형 자료의 아이템을 하나씩 가져오면서 반복을 수행하는 for문이 있다.
		- for문 :
			문자열,리스트,튜플,딕션너리,집합 등과 같은 순서형(Sequence) 자료 나 매핑형자료(딕션너리,집합)를 반복하여 처리한다.
			즉, for문은 순서형 자료(문자열,리스트, 튜플)나 매핑형자료(딕션너리,집합)의 요소를 하나 하나씩 가져와서 변수에 넣는다. 
		    또한 range 함수를 이용하면 for 문에서 사용할 수 있는 일련의 인덱스를 생성할 수 있다.
			
			for 다음 줄에서 들여쓰기를 하지 않으면 들여쓰기 에러 발생
			
			for 반복문은 반복 횟수가 정해져 있을 때 주로 사용한다
			
			※ragne(숫자) 함수: range는 0부터 지정한 숫자 - 1 까지 연속된 일련의 숫자를 차례대로 꺼낼 수 있는 이터레이터(반복자)를 반환하는 함수
                              이터레이터(iterator)는 값을 차례대로 꺼낼 수 있는 객체이다			
			                  for문은 반복할 때마다 이터레이터에서 숫자를 하나씩 꺼내서 반복한다
								
							  형식]
							  range(숫자) : 0부터 지정한 숫자 - 1 까지 연속된 일련의 숫자 생성
							  range(시작숫자, 끝숫자): 시작 숫자부터 끝숫자 -1까지 1씩 증가하는 숫자를 생성(기본값 1씩 증가)
							  range(시작숫자, 끝숫자,증감폭):시작 숫자부터 끝숫자 -1(혹은 +1)까지 증감폭만큼 증감하는 숫자를 생성
							  
							  
			※파이썬 2.x과 파이썬 3.x에서 range함수의 차이점
			 파이썬 2.x에서는 실제로 연속된 숫자가 들어있는 리스트반환
			 파이썬 3.x에서는 range 객체(반복 가능 객체) 를 반환
			 예]
				파이썬 2.x버전- 큰 숫자 지정시 미리 모든 숫자를 생성함으로 메모리를 많이 사용
				>>> range(10)
					[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
			   파이썬 3.x버전- 이터레이터객체만 생성하고 값이 필요한 시점이 되었을 때 값을 만드는 방식이다.
			                   즉, 데이터 생성을 뒤로 미루는 것인데 이런 방식을 지연 평가(lazy evaluation)라고 한다.
				>>> range(10)
					range(0, 10)
				>>> list(range(10))
				    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
			
			형식]
			
			for 변수 in range()함수: #for는 range()함수에 의해 생성된 숫자를 하나씩 꺼낼 때마다 코드가 실행된다.
			    실행할 문장
			혹은	
			
			for 변수 in 반복가능한 객체(순서형자료 혹은 매핑형자료):
				실행할 문장

		- while문 :
		
			반복해야 할 횟수가 특별히 정해지지 않고 어떤 특정 조건을 만족하는 동안만 반복할때 주로 사용
			
			
			형식]

		
			초기식
			while 조건식:
				반복할 명령문
				증감식
				 
			무한루프 처리]
			while True:
				실행할 문장;


	3.기타(continue문,break문)
		- break및 continue문 :
			continue문 이나 break문은 반복문(for/while)에서 사용
	             
			continue:
				continue문을 만나면 반복문 처음으로 이동
			break:
				break문을 만나면 반복문을 빠져 나간다.  
	 	
			또한 continue문이나 break문을 만나면 그 아래에 있는 명령문들은 실행이 안된다.
			
[순서가 있는 자료형(Orederd) 및 순서가 없는 자료형(Unordered)]

	-하나의 변수에 여러개의 데이타를 한번에 저장할때 사용하는 자료구조들이다.
	-문자열, 리스트, 튜플등이 순서형(Oredered 혹은 Sequence)에 속하고 딕셔너리,집합등이 순서가 없는 자료형(Unordered)에 속한다	
	 또한 문자열,리스트, 튜플,딕셔너리,집합등을 반복가능한 객체라고도 한다
	 
	1. 문자열
		- 문자, 단어 등으로 나열된 문자들의 집합을 의미한다
		  즉 문자열은 문자들이 일렬로 모여있는 상태이다
		- 파이썬에서 문자열을 만드는 방법은 총 4가지다. 즉 문자나 단어의 나열을 ',",''',"""로 감싼다 
		- 문자열은 저장된 값이 절대 변경되지 않는 불변의 객체이다
		- 인덱스로 접근하기
			  문자열[인덱스] 형태로 문자 하나를 가져 올 수 있다. 
			  일렬로 나열된 문자열에서 첫번째 문자열의 인덱스는 0이다
			  즉 인덱스는 0부터 시작한다

			  인덱스를 음수를 지정하면 요소 뒤에서부터 접근하는데 이때는 -1부터 시작한다
			  즉 뒤에서 첫번째 요소의 인덱스는 -1이다
		  ※문자열변수[인덱스]=값 으로 값을 할당할 수 없다. 즉 문자열 객체는 값을 바꿀 수 없는 불변의 객체이다
		    TypeError: 'str' object does not support item assignment발생
			값을 변경하려면 문자열을 리스트로(list()함수이용)만들어 변경 할 수 있다.
			
		- 비어 있는 문자열을 만들때는 아래와 같이 만들 수 있다.
			 a = '', 혹은 "" , '''''',""""""
			 a = str()  
		- 문자열의 갯수 알아내기
			len(문자열)
		- 문자열 슬라이싱: 문자열의 일부분을 잘라내서(slicing) 가져오기
		
			문자열변수[시작인덱스:끝인덱스] : 시작인덱스부터 끝인덱스-1까지 범위ㄹ의 문자열을 가져온다
			문자열변수[:끝인덱스] : 0번째 인덱스부터 끝인덱스-1까지범위의 문자열을 가져온다
			문자열변수[시작인덱스:] : 시작 인덱스부터 끝까지 범위의 문자열을 가져온다
			문자열변수[:] : 모든 문자열을 가져온다
			
		- 문자열의 주요 메소드들		
			
			문자열을 리스트로 혹은 리스트를 문자열로 변경]
			
				join(반복가능한 객체) : 리스트를 특정 구분자를 포함해 문자열로 변환.
										단,리스트의 모든 요소는 문자열객체(str)이어야 한다
				split()혹은 split(구분문자열): 공백(디폴트)을 기준으로 문자열을 분리하거나 구분문자열을 기준으로  
											   문자열을 분리하여 리스트로 변환해주는 메소드
											   단, 해당 구분자가 없을때는 문자열 전체가 리스트의 하나의 요소가 된다
			문자열 변경]※단, 원본 문자열은 절대 불변이다
				replace(원본문자열,대상문자열): 문자열안의 원본문자열을 대상문자열로 변경하여 새로운 문자열 객체를 생성한다				
				upper(): 문자열을 모두 대문자로 변환
				lower(): 문자열을 모두 소문자로 변환
				lstrip()혹은 lstrip('삭제할문자열'): 디폴트로 문자열에서 왼쪽 공백을 모두 삭제하거나 혹은 인자로 지정한 문자열들만 삭제한다
				rstrip() 혹은  rstrip('삭제할문자열'): 디폴트로 문자열에서 오른쪽 공백을 모두 삭제하거나 혹은 인자로 지정한 문자열만 삭제한다
				strip() 혹은 strip('삭제할문자열'): 디폴트로 문자열에서 양쪽 공백을 모두 삭제하거나 혹은 인자로 지정한 문자열들만 삭제한다
				zfill(숫자):지정된 숫자 크기만큼 문자열의 왼쪽에 0을 채운다 단, 문자열의 길이보다 지정된 숫자의 길이가 작다면 아무것도 채우지 않는다
				
			문자열의 정보 얻기]
				find(찾을문자열) :문자열에서 특정 문자열을 찾아서 인덱스를 반환, 문자열이 없으면 -1을 반환
				rfind(찾을문자열):문자열의 오른쪽에서부터 특정 문자열을 찾아서 인덱스를 반환,문자열이 없으면 -1을 반환
				index(찾을문자열):문자열에서 특정 문자열을 찾아서 인덱스를 반환, 문자열이 없으면 에러 발생
				rindex(찾을문자열):문자열의 오른쪽에서부터 특정 문자열을 찾아서 인덱스를 반환,문자열이 없으면 에러발생
				count(문자열):현재 문자열에서 특정 문자열의 출현 횟수를 반환
				
	2. 리스트(List) 자료형
		-파이썬에서 가장 많이 사용되는 자료형으로 순서가 있다 
	    -문자열, 숫자,bool 등 모든 자료형을 저장할 수 있으며 자료형을 섞어서 저장해도 된다
		 물론 리스트 안에 리스트, 튜플, 딕셔너리, 세트, 함수 등도 저장할 수 있다
		 모든 객체를 값으로 가질수 있다
		-대괄호로 묶어 표현한다 즉 리스트변수 = [값1, 값2, 값3,....]
		-비어 있는 리스트를 만들때는 아래와 같이 만들 수 있다.
			 a = []
			 a = list()
		 또한 list()함수는 이터레이터를 리스트형으로 변환할 수 있다.
			 예]
				>>>list(ragne(5))
				   [0,1,2,3,4]
				>>>list('PYTHON')
				   ['P','Y','T','H','O','N']
				>>>list((0,1,2,3,4))
				   [0,1,2,3,4]
				>>>list({'name':'홍길동','age':20})
				   ['name','age']
	   
	   -인덱스로 접근하기
			리스트에 저장된 각 값을 요소(element)라고 한다
			요소에 접근할 때는 
			리스트명[인덱스] 로 접근한다
			이때 인덱스는 0부터 시작한다
			인덱스를 음수를 지정하면 요소 뒤에서부터 접근하는데 이때는 -1부터 시작한다
			즉 뒤에서 첫번째 요소의 인덱스는 -1이다
	   -리스트에 값 할당하기.단 빈 리스트에는 append()함수를 이용해서 할당해야 한다
			리스트변수[인덱스]=값
		 
	   -리스트의 저장된 요소 갯수 알아내기
			len(리스트변수)
		
	   -리스트 슬라이싱: 리스트의 일부분을 잘라내서(slicing) 가져오기
		
			리스트변수[시작인덱스:끝인덱스] : 시작인덱스부터 끝인덱스-1까지의 요소를 가져온다
			리스트변수[:끝인덱스] : 0번째 인덱스부터 끝인덱스-1까지의 요소를 가져온다
			리스트변수[시작인덱스:] : 시작 인덱스부터 끝까지의 요소를 가져온다
			리스트변수[:] : 모든 요소를 가져온다
	   -리스트의 주요 메소드들
	   
	        요소추가 및 복사]
			
			append(값) : 리스트의 맨 뒤에 요소를 추가.이 함수는 리스트변수[len(리스트변수):]=[값] 와 같다
			extend(iterable): iterable 객체를 리스트의 맨 뒤에 추가.
		    insert(인덱스, 값) : 리스트의 특정 인덱스에 값을 추가
			copy() : copy()메소드에 의해 반환된 리스트를 받아서 사용
			
			요소삭제]
			
			remove(값) : 리스트에서 특정 값을 찾아서 삭제. 이때 같은 값이 여러 개일 경우 인덱스가 작은 값을 삭제.
			pop() 혹은 pop(인덱스):pop()은 리스트의 마지막 값을 삭제. 그리고  삭제한 값을 반환.
                                   pop(인덱스)는 해당 인덱스의 값을 삭제한 뒤 삭제한 값을 반환
								   
			del 리스트변수[인덱스] :해당 인덱스의 값을 삭제.print문에 사용불가
			del 리스트변수[시작인덱스:끝인덱스] :시작인덱스부터 끝인덱스-1까지 요소 삭제.
			del 리스트변수[시작인덱스:] :시작인덱스부터 끝까지 요소 삭제.
			del 리스트변수[:끝인덱스] :0 인덱스부터 끝인덱스-1까지 요소 삭제.
			del 리스트변수[:] : 리스트의 모든 요소를 삭제.clear()와 같다
			
			clear() : 리스트의 모든 요소를 삭제.
								   
			요소 인덱스 및 개수 그리고 정렬]
			
			index(값) : 리스트에서 특정 값의 인덱스 반환. 이때 같은 값이 여러 개일 경우 가장 작은 인덱스 반환
			count(값): 리스트에서 특정 값의 개수 반환
			reverse(): 리스트에서 값의 순서를 반대로 정렬
			sort() : 리스트의 값을 오름 차순으로 정렬
			sort(reverse=True): 리스트의 값을 내림차순으로 정렬
			
			
			
		
		※리스트의 산술 연산
			- +연산자는 리스트를 서로 연결하여 새로운 리스트를 만든다.
			  
			- *연산자는 특정 횟수만큼 리스트의 요소를 반복한다
			   0 또는 음수를 곱하면 빈 리스트가 나온다.
			   실수는 곱할 수 없다.
			   
			즉 리스트에 +,*만 가능하다 다른 산술 연산은 할수 없다
			
		- 리스트 표현식
			리스트 안에 식, for 반복문,if문 등을 지정하여 리스트를 생성하는 것을 리스트 표현식이라고 한다
			혹은 다른 용어로 리스트 내포, 리스트 축약등으로 사용한다
		    여러 줄의 코드를 한 줄로 표현 할 수 있다는 점이 장점이다
		
			형식]대괄호를 사용하거나 list()함수를 사용하여 리스트 생성
			
				[식 for 변수 in range함수]#range함수에 의해 생성된 수를 변수에 담고 담은 
										  #변수의 식을 이용해서 리스트의 요소를 하나씩 생성한다는 의미
				[식 for 변수 in range함수 if 조건식]#range함수에 의해 생성된 수중 if조건에 맞는 수를 변수에 담고 담은 
													#변수의 식을 이용해서 리스트의 요소를 하나씩 생성한다는 의미
				
				list(식 for 변수 in range함수)			
				list(식 for 변수 in range함수 if 조건식)
				
				또한 리스트 안에 중첩 for문을 사용할 수도 있다.
				[식 for 변수1 in range함수1 if 조건식1
					for 변수2 in range함수2 if 조건식2
					... 
					for 변수n in range함수n if 조건식n]
				 
				list(식 for 변수1 in range함수1 if 조건식1 
						for 변수2 in range함수2 if 조건식2
						 ...
						for 변수n in range함수n if 조건식n)
		-2차원 리스트
			- 1차원 리스트를 평면으로 쌓은 형태로 행과 열로 이루어졌다
			- 리스트안에 리스트를 넣어서 [[값, 값], [값, 값], [값, 값]]만든다
			  혹은 리스트안에 튜플을 넣을 수 도 있다 [(값, 값), (값, 값), (값, 값)]
		    - 각 행의 열의 수를 다르게 할 수도 있다
			  [[값, 값,값,값], [값, 값], [값, 값,값]]
			  
			- 행의 수 :  len(리스트변수)
			  열의 수 : len(리스트변수[행인덱스])
			- 2차원 리스트의 요소 값 읽거나 값을 할당하기
			  인덱스는 0부터 시작한다
			  값 읽기: 리스트변수[행인덱스][열인덱스]
			  값 할당: 리스트변수[행인덱스][열인덱스] = 값
			  
	        
			  
	3. 튜플(Tuple) 자료형
		-튜플은 아래 사항을 제외하고 리스트와 거의 비슷하다.
			
			1.리스트는 대괄호[]으로 둘러싸지만 튜플은 괄호()으로 둘러싼다.
			2.리스트는 그 값의 생성, 삭제, 수정이 가능하지만 튜플은 그 값을 바꿀 수 없다
			  즉 튜플은 읽기 전용 자료형이다.
			3.리스트는 대괄호[]를 생략할 수가 없다.하지만 튜플은 괄호()를 생략해도 된다.
			4요소가 한개인 튜플을 만들때 (값)이 아니라 (값,)이다.또는 괄호로 묶지 않고 값 한 개에 값, 로 해도 된다.
		-비어 있는 튜플를 만들때는 아래와 같이 만들 수 있다.
			 a = ()
			 a = tuple()
	    -인덱스로 접근하기
			튜플에 저장된 각 값을 요소(element)라고 한다
			요소에 접근할 때는 
			튜플명[인덱스] 로 접근한다
			이때 인덱스는 0부터 시작한다
			인덱스를 음수를 지정하면 요소 뒤에서부터 접근하는데 이때는 -1부터 시작한다
			즉 뒤에서 첫번째 요소의 인덱스는 -1이다
		-튜플의 저장된 요소 갯수 알아내기
			len(튜플변수)
		
	    -튜플 슬라이싱: 튜플의 일부분을 잘라내서(slicing) 가져오기
		
			튜플변수[시작인덱스:끝인덱스] : 시작인덱스부터 끝인덱스-1까지의 요소를 가져온다
			튜플변수[:끝인덱스] : 0번째 인덱스부터 끝인덱스-1까지의 요소를 가져온다
			튜플변수[시작인덱스:] : 시작 인덱스부터 끝까지의 요소를 가져온다
			튜플변수[:] : 모든 요소를 가져온다
			
	   -튜플의 주요 메소드들:데이터 변경과 관련된 메소드(append, extend, insert, remove, pop 등)는 사용할 수 없고 
	                         값의 정보를 구하는 index, count 메서드는 사용할 수 있다
	    
	   
	   -튜플의 산술 연산 : 리스트와 같다.값을 변경할 수는 없지만 +나 *연산을 통해
	                       새로운 튜플을 만들 수 있다
						   
	4. 딕션너리(Dictionary) 자료형
		- 사전( Dictionary)에서 단어와 그 단에에 대한 설명을 표기하는 것처럼 대응 관계를 나타내는 자료형이다          
		- 파이썬에서는 이러한 자료형을 딕셔너리(Dictionary)라고 하는데, 단어 그대로 해석하면 사전이라는 뜻이다. 
		  즉,딕셔너리는 Key와 Value 한 쌍으로 데이타를 저장하는 자료형이다. 
		- 딕셔너리는 리스트나 튜플처럼 순차적(Sequencial)이지 않다. 그래서 리스트나 튜플처럼 인덱스로 접근할 수없다
		- 딕셔너리는 { } 안에 Key:Value 형식으로 데이타를 저장하며 각 키와 값은 ,(콤마)로 구분해준다.
		  {키1: 값1, 키2: 값2}  
		- 딕셔너리에 키와 값을 저장할 때 키가 중복되면 중복되는 키는 저장되지 않는다.
		  즉,키값을 중복 저장시 나중에 지정한 키값이 저장된다.		  
		- 딕셔너리의 키는 문자열뿐만 아니라 리스트와 딕셔너리를 제외한 모든 자료형이 될 수있다
		  그리고 값에는 모든 자료형을 사용할 수 있다.
		  
		- 비어 있는 리스트를 만들때는 아래와 같이 만들 수 있다.
			a = {}
			a = dict()
		- dict()함수 사용법
			※zip(반복가능한객체*)함수 :동일한 개수로 된 반복 가능한 객체를 여러 개 넣으면 순서대로 각각의 요소를 튜플로 묶어서 zip 객체를 반환
			  예]
				>>> list(zip([1, 2, 3], [4, 5, 6]))
					[(1, 4), (2, 5), (3, 6)]
				>>> list(zip([1, 2, 3], [4, 5, 6], [7, 8, 9]))
					[(1, 4, 7), (2, 5, 8), (3, 6, 9)]
				>>> dict(zip([1, 2, 3], [4, 5, 6]))
					{1: 4, 2: 5, 3: 6}
				>>> dict(zip([1, 2, 3], [4, 5, 6], [7, 8, 9])) #dict함수 사용시는 반드시 반복가능한 객체가 2개여야 한다
				ValueError: dictionary update sequence element #0 has length 3; 2 is required
				
			dict(키1=값2, 키2=값2) #키에 ' '(작은따옴표)나 " "(큰따옴표)를 사용불가. 키는 딕셔너리를 만들고 나면 문자열로 변경됨.
			dict(zip([키1, 키2], [값1, 값2]))
			dict([(키1, 값1), (키2, 값2)])
			dict({키2: 값1, 키2: 값2})
	
		- 딕션너리 값읽기 및 할당		  
			값 읽기 : 딕션너리변수[키값]
			값 할당 : 딕션너리변수[키값] = 값
			※딕셔너리에 없는 키에 값을 할당하면 해당 키가 추가되고 값이 할당된다
			  단,딕셔너리에 없는 키에서 값을 읽으려고 하면 에러가 발생한다
		- 딕션너리에 저장된 요소(키와값의 쌍) 갯수 알아내기
			len(딕션너리변수)
		- 딕션너리의 주요 메소드들
	   
	        요소추가,수정 및 삭제 그리고 복사]
			
			setdefault(키) 혹는 setdefault(키, 기본값) : 딕셔너리에 키와 값을 추가. 
			                                             setdefault에 키만 지정시 값에 None을 저장,
														 기본값까지 지정시 값에 기본값을 저장.
														 단, setdefault로 딕셔너리에 이미 들어있는 키의 값은 수정불가. 
			update(키=값) : 딕셔너리에서 키에따른 값을 수정. 단, 키가 문자열일 때만 가능하다.
                            사용시 키에 작은따옴표 또는 큰따옴표를 붙이지 않는다
							
			pop(키) 혹은 pop(키, 기본값):특정 키-값 쌍을 삭제한 뒤 삭제한 값을 반환.
			                             pop(키)는 삭제할 키값이 없으면 에러발생 
			                             pop(키, 기본값)는 삭제할 키가 없으면 두번째 인자로 지정한 기본값 반환
			del 딕셔너리변수[키] :해당 키의 값을 삭제.print문에 사용불가
			popitem():딕셔너리에서 가장 뒤에 있는 키-값 쌍을 삭제. 그리고 삭제된 키-값 쌍을 튜플로 반환.
			clear(): 딕셔너리의 모든 키-값 쌍을 삭제.
			
			copy() : copy()메소드에 의해 반환된 딕션너리를 받아서 사용
			
			요소 읽기]
			get(키) 혹는 get(키, 기본값) :딕셔너리에서 특정 키의 값을 가져온다.
                                          기본값 미 지정시 해당 키가 없으면 None을 가져온다			
			                              기본값을 지정시는 딕셔너리에 키가 있을 때 해당 키의 값을 반환하지만 
										  키가 없을 때는 기본값을 반환.
			
			items() :딕셔너리의 키-값 쌍을 모두 가져올 수 있다.dict_items객체 형태로 반환한다.
			         dict_items([('name', '홍길동'), ('age', 20), ('addr', '강남'))
			keys() :키값만 반환.dict_keys객체로 반환.dict_keys(['name', 'age', 'addr'])
			values():값만 반환.dict_values객체로 반환. dict_values(['홍길동', 20,'강남'])
			dict.fromkeys(리스트 혹은 튜플) 혹은 dict.fromkeys(리스트 혹은 튜플, 값) : 리스트나 튜플로 딕셔너리를 만드는 함수.
			                              지정한 리스트나 튜플의 요소가 키가 된다, 두번째 인자로 값 미정시에 None이 모든 키에 대해 값으로 설정되고
										  값 지정시에는 모든 키에 지정한 값이 설정된다
										  
		    
		- 딕션너리 표현식
			딕션너리 안에 for 문,if문 등을 지정하여 딕션너리를 생성하는 것을 딕션너리 표현식이라고 한다.			
		    여러 줄의 코드를 한 줄로 표현 할 수 있다는 점이 장점이다
			특정 값을 기준으로 딕션너리를 다시 생성하는 방식으로 삭제 효과를 구현할 수 있다
		
			형식]{}를 사용하거나 dict()함수를 사용하여 딕션너리 생성
			
				{키: 값 for 키, 값 in 딕션너리.items()}
				{키: 값 for 키, 값 in 딕션너리.items() if 조건식}
				
				dict({키: 값 for 키, 값 in 딕션너리.items()})				
				dict({키: 값 for 키, 값 in 딕션너리.items() if 조건식})
											  
		- 중첩 딕셔너리 :딕션너리 안에 딕션너리가 있는 형태를 중첩 딕션너리라고 한다	
		     형식]
			 {키1: {키1-1: 값1-1,키1-2:값1-2}, 키2: {키2-1: 값2-2}}
			 딕셔너리 안에 들어있는 딕셔너리에 접근하려면 딕셔너리 뒤에 [ ](대괄호)를 단계만큼 붙이고 키를 지정한다.

			 값 읽기:딕셔너리변수[키][키]
			 값 할당:딕셔너리변수[키][키] = 값

	5 집합(set)  자료형
		- 수학의 집합으로 합집합, 교집합, 차집합 등의 연산을 할 수 있다
		- 리스트나 튜플은 순서가 있어 인덱싱을 통해 자료형의 값을 얻을 수 있다. 
          그러나 set 자료형은 순서가 없기 때문에 딕션너리처럼 인덱싱으로 값을 얻을 수 없다. 
		  set 자료형에 저장된 값을 인덱싱으로 접근하려면 리스트(list()함수)나 튜플(tuple()함수)로 변환해야 한다.
		  순서가 없기때문에 출력시 순서없이 출력된다.단,숫자로만 이루어진 세트는 순서대로 출력된다
		- set자료형은 딕션너리 처럼 중복을 허용하지 않는다.
		- set자료형은 리스트, 튜플, 딕셔너리와는 달리 [ ](로 특정 요소만 얻어올 수 없다
		- set자료형은 { }안에 값을  ,(콤마)로 구분하여 넣거나 set()함수로 만들 수 있다
		  {값1, 값2, 값3} 혹은 set(반복가능한객체)

		- 비어 있는 튜플를 만들때는 아래와 같이 만들 수 있다. a = {}는 set자료형이 아니라 빈 딕션너리다			
			 a = set()
		- set자료형는 리스트나 딕셔너리와 달리 세트 안에서 세트를 사용할 수 없다
			a = {{1, 2}, {3, 4}} #ypeError: unhashable type: 'set'발생
			
		- 집합 연산
			set자료형1 | set자료형2 : 합집합(union) - 두 집합을 더하는데 중복되는 요소은 제거한다
			set자료형1 & set자료형2 : 교집합(intersection) - 두 집합에서 공통 요소만 취한다
			set자료형1 - set자료형2 : 차집합(difference) - 집합의 빼기와 같다 즉 첫번째 집합에서 공통 요소를 뺀 요소만 취한다
			set자료형1 ^ set자료형2 : 대칭차집합(symmetric difference) - 두 집합의 공통 요소를 제외한 요소들만 취한다
		
		- 집합의 주요 메소드들
			set자료형은 |, &, -, ^ 연산자에 대응하는 메서드를 제공한다
			
			set.union(세트1, 세트2) : |(합집합)와 같다
			set.intersection(세트1, 세트2): &(교집합)와 같다
			set.difference(세트1, 세트2) : -(차집합)와 같다
			set.symmetric_difference(세트1, 세트2) : ^(대칭차집합)와 같다
			
			update(다른 set자료형): 현재 세트에 다른 세트를 더한다(|)
			intersection_update(다른 set자료형): 현재 세트와 다른 세트 중에서 겹치는 요소(값)만 현재 세트에 저장(&)
			difference_update(다른 set자료형) : 현재 세트에서 다른 세트를 뺀 결과를 현재 세트에 저장(-)
			symmetric_difference_update(다른 set자료형) : 현재 세트와 다른 세트 중에서 겹치지 않는 요소(값)만 현재 세트에 저장(^)
			len(set자료형) : set의 요소 개수 반환
			add(요소) : 세트에 요소(값)를 추가
			remove(요소): 세트에서 특정 요소(값)를 삭제하고 요소가 없으면 에러를 발생
			discard(요소): 세트에서 특정 요소(값)를 삭제하고 요소가 없으면 에러를 발생시키지 않는다
			clear(): 세트에서 모든 요소(값)를 삭제
			
			copy() : copy()메소드에 의해 반환된 집합 사용
			
		- 집합 표현식
			집합안에 for 문,if문 등을 지정하여 집합을 생성하는 것을 집합 표현식이라고 한다.			
		    여러 줄의 코드를 한 줄로 표현 할 수 있다는 점이 장점이다
					
			형식]{}를 사용하거나 set()함수를 사용하여 집합 생성
				{식 for 변수 in 반복가능한객체}
				{식 for 변수 in 세트 if 조건식}

				set(식 for 변수 in 반복가능한객체)
				set(식 for 변수 in 세트 if 조건식)
			

[함수(function)]

	1. 함수란?
		- 어떤 값을 입력으로 받아서 어떤 일을 수행 한 다음 그 일의 결과물은 내어놓는 코드의 묶음을 함수라 한다
		- 함수는 특히 반복적인 코드의 수행을 제거해 준다. 즉 어떤 입력값에 따라 결과 값이 달라지는 
		  코드부분을 함수로 만들어 해당 코드가 필요한 부분에서 그 함수를 사용(호출한다고 한다)하기만 하면 된다.
	  
	2. 함수의 구조	
		
		
		def 함수명([매개변수들]):
			수행할 코드1
			수행할 코드2
			...
		-def는 예약어이며 define에서 따온 키워드이다
         함수명은 임의로 만들수 있다 단,변수의 명명규칙과 동일해야 한다
		 함수명 뒤 괄호 안의 매개변수는 이 함수에 입력으로 전달되는 값을 받는 변수이다
		 괄호() 뒤에는 반드시 :을 붙여 함수 블락의 시작을 나타내야 한다.
		 수행할 코드는 반드시 들여쓰기를 해야한다
		 
		※내용이 없는 빈 함수를 만들기
			def 함수명([매개변수들]):
				pass
		※함수안에서 선언된 변수나 매개변수들은 모두 함수안에서만 사용가능한 지역변수이다
		
	
		
	3. 함수 호출
		-11-2의 형식대로 정의한 함수를 사용하는것을 호출(call)한다고 한다.
		 예]
		 def printmessage(msg):
			print(msg)
		
		 printmessage('Hello World') # 함수 호출
		 
		 이때 함수 정의시 사용한 변수인 msg 즉 전달된 값을 받는 변수를 매개변수(parameter)라고 하고
		 함수를 호출할때 전달한 입력값인 'Hello Wolrd'를 인수(arguments)라고 한다
		 
	4. 함수 독스트링 사용하기
		-함수 정의시 :(콜론) 바로 다음 줄에 ''' 또는 """을(독스트링) 사용하면 함수에 대한 설명을 넣을 수 있다
		-역시 함수 독스트링도 반드시 들여쓰기를 해야한다
		-함수명.__doc__으로 함수에 대한 설명을 출력할 수 있다 . 
		 단,함수에 대한 설명글인 함수 독스트링은 무조건 함수의 맨 윗줄에 와야 한다
		 
		
		※help(객체) 내장함수를 사용하여 함수명 및 매개변수 그리고 독스트링을 도움말 형태로 출력할 수 있다
		  예]>>>help(함수명)
			Help on function 함수명 in module __main__:
			
			함수명([매개변수들])
			독스트링

	5. 함수의 결과값 반환하기
		- 함수에서 어떤 일을 수행 한 다음 그 일의 결과물은 호출한 쪽으로 돌려주는 것을 '반환한다' 라고 한다
		- 결과값을 반환할때는 return이라는 예약어를 사용한다
			
			형식]
			def 함수명([매개변수들]):
				수행할 코드1
				수행할 코드2
				...
				return 결과값
				
		- return는 또한 함수 실행중 특정 조건하에서 중간에 함수를 빠져 나가기 위한 용도로도 자주 사용된다
		
		- 값을 여러개 반환할때는 ,(콤마)로 구분해서 반환한다. 이때 반환되는 객체는 튜플이다
		  즉 파이썬에서 값을 ,로 구분하면 튜플이기 때문이다
		  물론 튜플뿐만 아니라 리스트 , 딕션너리등의 타입으로 값을 여러개 반환할 수도 있다.
		  
		  예]
			def fn(b,c):
				
				return b,c # (b,c)와 같다
			
			x,y = fn(10,20)# x에는 10,y에는 20이 할당된다
			
			
			
	6. 함수의 4가지 형식
		
		-함수 형식 1]매개변수도 없고 반환값도 없는 경우
					:주로 [출력하는 기능]을 담당한다.
				
				def 함수명():
					수행할 코드
					
					
		-함수 형식 2]매개변수는 없고 반환 값이 있는 경우
					:주로 함수안에서 사용자로부터 값을 입력받고 입력받은 값으로
					 일을 처리한 후 그 결과값을 반환하고자 할때 주로 사용

				def 함수명():
					수행할 코드
					return 결과값
		  
		-함수 형식 3]매개변수는 있고 반환값은 없는 경우
					:함수에서 필요한 값을 매개변수를 통해서 입력값으로 받고
					 그 값으로 일을 처리한 후 결과값을 바로 출력하고자 할때 주로 사용

				def 함수명([매개변수들]):
					수행할 코드
	   -함수 형식 4]매개변수도 있고 반환값도 있는 경우
					:가장 활용빈도가 높는 함수 형식

				def 함수명([매개변수들]):
					수행할 코드
					return 결과값
					
	7. 위치 인수와 키워드 인수
		
		
		- 위치 인수 :함수에 인수를 순서대로 넣는 방식을 위치 인수(Positional Argument)라고 한다. 
		             즉 인수의 위치가 정해져 있는 형태이다
					 
					 def 함수명(매개변수1,매개변수2,매개변수3...):
						수행할 코드
						[return 결과값]		
                       
					 함수 호출]
					 - 호출시 순서대로 값을 넣어야 매개변수에 순서대로 할당된다.
					 
					 함수명(값1,값2,값3...)
					
					   
		- 키워드 인수:함수에 인수를 넣을때 key=value의 형태로 인수의 용도를 지정하는 인수를 Keyword Argument라고 한다
		              즉 함수에 인수를 전달할때 인수의 순서나 용도를 기억할 필요가 없다.
					  
					  def 함수명(매개변수1,매개변수2,매개변수3...):
						수행할 코드
						[return 결과값]		
                       
					  함수 호출]
					   
					  - 호출시 순서를 바꿔도 상관없다
					
					  함수명(매개변수1=값1,매개변수2=값2,매개변수3=값3...) 
					  함수명(매개변수2=값2,매개변수3=값3,매개변수1=값1...) 
					  함수명(**{딕션너리}) 딕션너리 언패킹이 된다
	
	
		※가변인수(Variable Arguments) 함수
					  - 함수의 입력값이 몇개일지 모를때 즉 여러개의 입력값을 받을 수 있도록 정의한 함수이다
                        이와 상반되는 함수가 고정인수(Fixed Arguments) 함수이다
					  - 함수 정의시 매개변수앞에 *를 붙여서 만들 수 있다(위치인수를 받는 매개변수)
					    혹은 매개변수앞에 **두개를 붙여서 만들 수도 있다(키워드인수를 받는 매개변수)
					  
					     def 함수명(*args[,**kwargs]):
							수행할 코드
							[return 결과값]
					  
					  - *args인수로 여러개의 값을 전달해도 되고 리스트나 튜플등을 인수로 전달하면
					    언패킹이 일어나고 이때 입력값들은 모두 튜플로 변환이 되어 args에 저장된다
						 
					  - **kwargs인수로 key=value 형태로 여러개의 값을 전달해도 되고 딕션너리를 인수로 전달하면 역시
					      언패킹이 일어난다
						  이때 입력값들은 모두 딕션너리로 변환이되어 kwargs에 전달된다
						  
										  
					  - 가변인수와 고정인수를 함께 받는 함수를 정의할때는 항상 고정인수를 받는 매개변수가
                        가변인수를 받는 매개변수보다 앞에 지정되어야 한다. 안그러면 함수 호출시 에러 발생.
						
						또한 고정 매개변수와 *args, **kwargs를 함께 사용할때 매개변수의 순서는 
						고정 매개변수, *args, **kwargs 순으로 지정해야 한다.
						
					    def 함수명(arg,*args[,**kwargs]):
							수행할 코드
							[return 결과값]
							
		※위치인수에 값 여러개 전달시 *는 리스트나 튜플에 사용하고, 키워드인수에 값 전달시 **는 딕셔너리에 사용한다
		
	8. 매개변수의 초기값 설정하기
		
		- 함수 정의시 매개변수=값 형식으로 매개변수에 초기값을 설정할 수 있다
		- 초기값 설정시 함수 호출할때 인수를 전달하지 않으면 초기값으로 해당 매개변수가 설정된다
		- 함수의 매개변수에 전달되는 값이 자주 변하는 값이 아닐 경우에는 함수의 초깃값을 미리 설정해 두면 유용하다
		
		  def 함수명(매개변수1,매개변수2,....,매개변수N=값):
			  수행할 코드
			  [return 결과값]
		  ※초기값이 지정된 매개변수는 항상 맨 뒤에 와야 한다
		     함수명(매개변수1,매개변수2,매개변수3=값3)
			 함수명(매개변수1,매개변수2=값2,매개변수3=값3)
			 함수명(매개변수1=값1,매개변수2=값2,매개변수3=값3)
		  
	9. 람다(lambda) 표현식 혹은 람다 함수
		- 람다(lambda)는 익명함수(람다 함수)를 만들 때 사용하는 예약어로
		  이름이 없는 함수(anonymous function)를 한줄로 간결하게 만들 때 사용한다.
		  또한 식 형태로 되어 있다고 해서 람다 표현식(lambda expression) 이라고도 한다
		- def를 사용해 함수를 정의할 정도로 복잡하지 않거나 def를 사용할 수 없는 곳 즉 
		  다른 함수의 인수로 넣을 때나 반복가능한 객체의 요소로 넣을때 주로 사용한다.
		  
		  
		  람다표현식]
		  
			lambda 매개변수1, 매개변수2, ... : 반환할 식
		  
        - 람다표현식의 '반환할 식'부분에 할당 연산자(=)를 이용해서 문(statement)을 만들어 사용할 수없다
		  단지 매개변수를 이용한 식(expression)만이 올 수 있다
		
		
		  
		  
			  예]
			  #람다 표현식을 이용한 함수 정의
			  sum = lambda a, b: a+b
			  sum(10,20)
			  
			  #위 람다표현식을 def를 이용해 함수 정의
			  def sum(a,b):
				return a+b				
			  sum(10,20)
			  
		- 람다표현식 안에서 조건식 if, else를 사용할 때는 :(콜론)을 붙이지 않는다. 
		  람다표현식에서 if 사용시에는 반드시 else를 함께 사용해야 한다. 
		  또한 람다표현식에서는  elif를 사용할 수 없다.
			  예]
			  
			  lambda 매개변수1, 매개변수2...:식1 if 조건식 else 식2 #식1은 조건식이 참일 때, 식2는 조건식이 거짓일 때 실행할 식이다.
			  
			
		  ※람다로 매개변수가 없는 함수를 만들 때는 lambda 뒤에 아무것도 지정하지 않고 :(콜론)을 붙인다. 
		    그리고 반드시 반환할 값을 지정한다
			
				lambda : 반환할 값
		  
				예]
				
				lambda : 100
				혹은
				a=100
				lambda : a
			
		  
	10. 지역변수와 전역변수
		
			- 함수안(지역범위)에서 사용된 변수를 지역변수(Local Variable)이라하고 파이썬 스크립트파일(전역범위)에서 사용된 변수를 
			  전역변수(Global variable)라고 한다
			- 함수 안에서 global 변수명 이라고 선언하면 그 변수는 스크립트 파일에서 사용할 수 있는 전연변수를
			  의미한다
		  
		    ※ 지역변수와 전역변수가 충돌할때는 지역변수가 우선이다
			
	11. 내장 함수(built-in function)
			- 파이썬 스크립트파일에서 모듈이나 패키지를 import하지 않고 바로 사용할 수 있는 함수
			
			- 주요 내장 함수
			
				abs(숫자) : 숫자의 절대값을 반환하는 함수
				all(반복가능한객체) : 반복 가능한 객체의 요소가 모두 참이면 True, 하나라도 거짓이면 False
				any(반복가능한객체) : 반복 가능한 객체의 요소가 하나라도 참이면 True, 모두 거짓이면 False
				bin(정수): 정수를 2진수로 변환해 문자열로 반환
				bool(값) : 값을 True, False로 변환하여 반환. 0이 아닌 숫자, 내용이 있는 객체는 True를 반환, 0, None, 비어있는 객체는 False를 반환
				bytes(값, 인코딩) : 바이트 객체를 반환, bytes는 바이트 단위(8비트)로 문자열을 저장하는 자료형
				예) bytes('안녕', encoding='utf-8')은 b'\xec\x95\x88\xeb\x85\x95'
				chr(코드값) : ASCII 코드값에 해당하는 문자를 반환. 예) chr(97)은 'a'
				dict(반복가능한객체): 반복 가능한 객체로 딕셔너리를 생성하여 반환
				dir(객체) : 객체의 네임스페이스를 반환, 객체를 지정하지 않으면 현재 네임스페이스를 반환
				divmod(a, b) : 두 숫자의 몫과 나머지를 튜플로 반환
				enumerate(순서가 있는 자료형): 리스트, 튜플, 문자열객체의 요소의 순서(인덱스)와 요소를 튜플로 묶어서 enumerate 객체로 반환
				※ 보통 enumerate 함수는 for문과 함께 자주 사용된다
				예) list(enumerate(['a', 'b', 'c']))는 [(0, 'a'), (1, 'b'), (2, 'c')]

				eval(문자열):문자열 형태의 파이썬 코드를 실행하고 결과를 반환(문자열을 파이썬 인터프리터에서 실행). 
			   예) eval('print(1, 2)')는 1 2 출력

				filter(함수, 반복가능한객체): 반복 가능한 객체에서 특정 조건에 맞는 요소만 가져옴
				예) list(filter(lambda x: x % 2 == 0, [1, 2, 3, 4]))는 [2, 4]

				float(값):숫자나 문자열을 실수로 변환하여 반환

				help(객체):객체의 이름, 매개변수, 독스트링(__doc__ 속성)을 도움말 형태로 출력

				hex(정수):정수를 16진수로 된 문자열로 변환해서 반환

				id(객체):객체의 고유한 값(메모리 주소)을 반환
				input(문자열) : 사용자의 입력을 받아서 문자열을 반환

				int(값): 숫자나 문자열을 정수로 변환하여 반환, int(문자열, 진법)은 해당 진법으로 된 문자열을 10진수로 변환하여 반환

				isinstance(객체, 클래스):객체가 클래스의 인스턴스인지 확인, 클래스의 인스턴스가 맞으면 True, 아니면 False

				issubclass(파생클래스, 기반클래스):클래스가 특정 클래스의 파생 클래스인지 확인, 파생 클래스가 맞으면 True, 아니면 False

				iter(객체):객체에서 이터레이터를 반환. 객체의 __iter__ 메서드를 호출해줌

				len(객체):객체의 길이(요소 개수)를 반환

				list(반복가능한객체):반복 가능한 객체로 리스트로 변환하여 반환

				map(함수, 반복가능한객체):반복 가능한 객체의 요소를 지정된 함수로 처리한 뒤 map 객체를 반환

				예) list(map(lambda x: x + 10, [1, 2]))는 [11, 12]

				min(반복가능한객체) :반복 가능한 객체의 요소 중에서 가장 작은 요소를 반환

				max(반복가능한객체):반복 가능한 객체의 요소 중에서 가장 큰 요소를 반환

				next(이터레이터):이터레이터에서 요소를 차례대로 가져와서 반환, 이터레이터의 __iter__ 메서드를 호출해줌
				oct(정수):정수를 8진수로 된 문자열로 변환해서 반환

				open(파일이름, 파일모드):지정된 파일을 열어서 파일 객체를 반환, encoding을 지정하면 파일을 해당 인코딩으로 처리(텍스트 모드에만 적용됨)

				예) open('hello.txt', 'w', encoding='utf-8')은 파일의 인코딩을 UTF-8로 저장

				ord(문자):문자의 ASCII 코드를 반환. 예) ord('a')는 97

				pow(값, 지수):값을 지수만큼 거듭제곱한 값을 반환

				range(횟수):지정된 횟수만큼 숫자를 생성하는 반복 가능한 객체를 반환

				repr(객체):파이썬 인터프리터에서 실행할 수 있는 문자열을 반환. repr에서 반환된 문자열은 eval로 실행할 수 있음

				reversed(반복가능한객체):반복 가능한 객체에서 요소의 순서를 뒤집어서 반환

				set(반복가능한객체):반복 가능한 객체로 세트로 변환하여 반환

				sorted(반복가능한객체):반복 가능한 객체의 요소를 오름차순 정렬하여 반환, reverse=True를 지정하면 내림차순 정렬 
				예) sorted([8, 5, 2])는 [2, 5, 8]
				split(['구분자']) : 구분자를 기준으로 문자열을 분리하여 리스트로 반환
				                  구분자 미 지정시 공백(기본값)을 기준으로 분리
				str(값):값을 문자열로 변환하여 반환

				super():현재 클래스의 기반 클래스 객체를 반환
				
				sum(반복가능한객체):반복 가능한 객체에 들어있는 모든 요소의 합을 반환

				tuple(반복가능한객체):반복 가능한 객체로 튜플로 변환하여 반환

				type(객체):객체의 클래스(자료형) 객체를 반환. type('클래스이름', 기반클래스튜플, 속성메서드딕셔너리)는 클래스 객체를 생성하여 반환

				zip(반복가능한객체, ...):같은 개수로 된 반복 가능한 객체를 여러 개 넣으면 순서대로 각 요소를 튜플로 묶어서 zip 객체를 반환

				예) list(zip([1, 2, 3], [97, 98, 99]))는 [(1, 97), (2, 98), (3, 99)]

[모듈 및 패키지]	

	
	-모듈: 함수나 변수 또는 클래스 등을 모아 놓은 파일.즉 스크립트 파일에서 확장자 .py를 제외하면 모듈 이름이 된다
	       

	-패키지: 특정 기능과 관련된 여러 모듈들을 묶어 놓은 것.디렉토리와 같다.
	         즉 하나의 간단한 기능을 만들때 모듈로 만들고 복잡하고 코드가 많은 기능을 모듈 여러개로 만들때는  
			 패키지로 만든다.
			 패키지로 만들면 팀단위 작업이나 유지 보수 면에서 유리하다. 또한 
			 패키지 구조로 모듈을 만들면 다른 모듈과 이름이 겹쳐도 상관없다
	-라이브러리: 파이썬에 기본적으로 설치된 모듈과 내장 함수를 묶어서 파이썬 표준 라이브러리(Python Standard Library, PSL)라 한다.
	             
	
	
		
		
	1.모듈 사용하기 : import 키워드로 불러와 모듈에 있는 변수나 함수, 클래스등을 사용할 수 있다
	             ※import 모듈명는 현재 디렉터리에 있는 파일이나 파이썬 라이브러리가 저장된 디렉터리에 
				  있는 모듈만 불러올 수 있다.
				
		
		모듈 불러오기 1]
		
			import 모듈
			import 모듈1, 모듈2,...
			
			-불러온 모듈의 변수나 함수,클래스등는 모듈.변수 혹은 모듈.함수명(),모듈.클래스명()식으로 사용한다
		
		모듈 불러오기 2]
		
			import 패키지.모듈
			import 패키지.모듈1, 패키지.모듈2,...
			
			-불러온 모듈의 변수나 함수,클래스등는 패키지.모듈.변수 혹은 패키지.모듈.함수명(),패키지.모듈.클래스명()식으로 사용한다
			 ※import 패키지명을 수행하면  import한 패키지인 디렉터리의 모듈 또는 해당 디렉토리의 __init__.py에 
			  정의된 것들만 참조할 수 있다.
			  예]a.b.c형태의 패키지가 존재한다면
			  import a시 
			  a.b.모듈 혹은 a.b.c.모듈식으로 접근 불가하다
			  

		모듈 불러오기 3]
		
			import 모듈 as 별칭
			
			import 패키지.모듈 as 별칭
			
			단, 모듈의 별칭은 현재 파이썬 셸이나 스크립트 파일 안에서만 유효하다. 
			
			-불러온 모듈의 변수나 함수등는 별칭.변수 혹은 별칭.함수명()식으로 사용한다
			
		모듈 불러오기 4]-코드를 짧게 줄일 수 있어서 파이썬 스크립트에서 자주 사용하는 방법이다
		
		    특정 변수나 함수등을 불러올때
			
				from 모듈 import 변수
				from 모듈 import 함수			
				from 모듈 import 변수, 함수, 클래스
				from 패키지.모듈 import 변수
				
				from 패키지.모듈 import 변수
				from 패키지.모듈 import 함수
				from 패키지.모듈 import 변수, 함수, 클래스
				
				
			모듈의 모든 변수, 함수, 클래스를 불러올때
			
				from 모듈 import *
				from 패키지.모듈 import *
			-불러온 모듈의 변수나 함수등는 바로 모듈명을 붙이지 않고 바로 사용할 수 있다.
			
			
			
		모듈 불러오기 5]
			from 모듈 import 변수 as 별칭
			from 모듈 import 함수 as 별칭
			from 모듈 import 클래스 as 별칭
			
			from 모듈 import 변수 as 별칭,함수 as 별칭,클래스 as 별칭
			
			
			from 패키지.모듈 import 변수 as 별칭
			from 패키지.모듈 import 함수 as 별칭
			from 패키지.모듈 import 클래스 as 별칭
			
			from 패키지.모듈 import 변수 as 별칭,함수 as 별칭,클래스 as 별칭
			
			
			-불러온 모듈의 변수나 함수,클래스등는 별칭만을 가지고 사용한다
			
			
		
		
		※파이썬에서 import로 모듈을 가져오면 해당 스크립트 파일이 한 번 실행된다
		※__name__변수 :  현재 스크립트 파일이 프로그램의 진입점인지 아닌지 판단할때 사용하는 변수로
                          import로 스크립트 파일을 불러오면 __name__변수에는  .py를 제외한 파일명 즉 모듈의 이름이 저장되고
						  파이썬 인터프리터로 스크립트 파일을 실행하면 모듈의 이름이 아니라 '__main__'이 저장된다
						  또한 패키지안의 모듈에서는 __name__ 변수에 패키지.모듈 형식으로 모듈명이 저장된다.
						  
						 예]
							 hello.py
							 -----------------------
							 print('hello.py:',__name__)
							 
							 index.py
							 -----------------------
							 import hello
							 print('index.py:',__name__)
							 
							 
							 python index.py실행 결과]
							 hello.py:hello
							 index.py:__main__
							 
							 python hello.py실행 결과]
							 hello.py:__main__
							 
							 
							 스크립트 파일을 실행할 수도 있고, 모듈로도 사용할 수 있는 코드 예]
							 즉 파이썬 모듈을 만든 다음 그 모듈을 테스트하기 위해 주로 사용하는 코드]
							 
							 def 함수():
								명령문
 
							 if __name__ == '__main__':    # 프로그램의 진입점일 때만 아래 코드 실행
								함수()

						 
		
	2. 패키지 만들기
		
		2-1. 디렉토리를 만든다
		2-2. 디렉토리 안에 __init__.py 스크립트 파일을 만든다.
		     __init__.py 스크립트 파일은 빈 파일일 수 있다
			 디렉터리안에 __init__.py 파일이 있으면 해당 디렉토리는 패키지로 인식된다.
			 또한  __init__.py파일은 패키지를 초기화하는 역할을 한다
			 
		    ※파이썬 3.3 이상부터는 __init__.py 파일이 없어도 패키지로 인식된다. 
			  하지만 하위 버전과의 호환성을 위해 __init__.py 파일을 만드는것을 권장한다
		
			※import 모듈 인 경우에는  * 를 사용해 모듈안의 모든 변수 나 함수, 클래스등을 import할수 있다
	         단,import 패키지 인경우에는 * 를 사용시에는 해당 디렉터리의 __init__.py 파일에 
			 __all__이라는 변수를 사용하여 import할 수 있는 모듈을 정의해 주어야 한다
	         예] from 패키지 import *
		        패키지에 해당하는 디렉토리/__init__.py
		        __all__ = ['모듈명']
	   2-3. __init__.py스크립트 파일로 패키지 초기화 하기
	   
			-패키지의 모듈을 가져올 때 'import 패키지.모듈' 형식이 아닌 패키지만 지정할 수 있도록
			 __init__.py파일을 초기화 한다
			 
			-__init__.py파일 수정
			 
			 
			 from . import 모듈1 #현재 패키지(.)에서 모듈1을 불러옴
			
			 
			 혹은
			 
			 from .모듈1 import 변수, 함수, 클래스
			 
			 혹은
			 
			 from .모듈1 import *
			 
			이제 'import 패키지명' 형식으로 패키지명만 지정할 수 있다.
			 
		※파이썬에서는 현재 폴더에 모듈, 패키지가 없으면 sys.path 경로에서 모듈, 패키지를 찾는다.	
		 import sys
		 print(sys.path)
		 
		 여기서 site-packages 폴더에는 pip로 설치한 패키지가 들어간다. 
		 그리고 자기가 만든 모듈, 패키지도 site-packages 폴더에 넣으면 
		 스크립트 파일(모듈)이 어디에 있든 자기가 만든 모듈, 패키지를 사용할 수 있다.
		 
	   
	3.pip
		
		 -파이썬 모듈이나 패키지를 쉽게 설치할 수 있도록 도와주는 도구로
		  파이썬 패키지 인덱스(PyPI)의 패키지 관리 명령어이며 Windows용 파이썬에는 기본적으로 내장되어 있다
		  pip을 이용해서 파이썬 프로그램을 설치하면 의존성 있는 모듈이나 패키지를 함께 설치해 주기 때문에 
		  매우 편리하다
		  ※리눅스와 macOS에서는 콘솔(터미널)에서 다음과 같은 방법으로 설치해야 한다
			$ curl -O https://bootstrap.pypa.io/get-pip.py
			$ sudo python3 get-pip.py
		
		 -패키지 설치 
			pip install 패키지
			※버전을 생략한 경우 최종버전으로 설치
		 -특정 버전으로 설치
			pip install 패키지==버전번호
			
		 -최신 버전으로 패키지 업그레이드

			pip install --upgrade 패키지
			
		 -설치된 패키지 확인
			pip list 
			
		 -패키지 삭제
			pip uninstall 패키지
			 
		
			
		 ※PyPI(Python Package Index)는 파이썬 소프트웨어가 모여 있는 저장공간(https://pypi.org)으로 수많은 파이썬 패키지가 
		   등록되어 있다. 이 곳에 등록된 파이썬 패키지는 누구나 다운받아 사용할 수 있다
		 ※pip로 패키지를 설치하면 설치된 패키지들은 파이썬 설치 디렉터리의 Lib/site-packages 안에 저장된다
		   Lib/site-packages에 있는 패키지나 모듈은 모든 파이썬 스크립트에서 사용할 수 있다
		







[예외처리]

	1.예외(Exception)- 프로그램 실행도중에 발생하는 에러를 말한다
	                   예외가 발생하면 발생한 코드부터 프로그램 실행이 멈춘다
     
    
	2.예외 처리 : 예외가 발생하더라도 프로그램 실행을 멈추지 않고 계속 실행하게 하는 것
	
		방법1] 모든 예외 처리하는 경우(에러메시지 없이)
			try:
				예외가 발생할 만한 코드
			except:
				예외가 발생했을 때 처리할 코드
    	
		방법2]특정 예외만 처리하는 경우
				  
			try:
				예외가 발생할 만한 코드
			except 예외명1:
				예외명1이 발생했을 때 처리할 코드
			except 예외명2:
				예외명2가 발생했을 때 처리할 코드
				
			혹은 여러 예외 동시 처리
			try:
				예외가 발생할 만한 코드
			except (예외명1,예외명2) :
				예외명1 혹은 2가 발생했을 때 처리할 코드
			  
			  
		방법3]예외 메시지를 출력하고자 하는 경우
			try:
				예외가 발생할 만한 코드
			except 예외명 as 변수:#as 뒤에 변수를 지정하면 변수에 에러 메시지가 저장됨
				예외명이 발생했을 때 처리할 코드
			
		방법4]모든 예외 처리하는 경우(에러메시지 포함)
			try:
				예외가 발생할 만한 코드
			except Exception as 변수:
				예외가 발생했을 때 처리할 코드
				
		방법5]else절 사용
			try:
				예외가 발생할 만한 코드
			except:
				예외가 발생했을 때 처리하는 코드
			else:
				예외가 발생하지 않았을 때 실행할 코드
			
			※except를 생략할 수 없다.
			
		방법6]finally절 사용
			try:
				예외가 발생할 만한 코드
			except:
				예외가 발생했을 때 처리하는 코드
			else:
				예외가 발생하지 않았을 때 실행할 코드
			finally:
				예외 발생 여부와 상관없이 항상 실행할 코드
		    
			※except와 else절 생략 가능
				
		※예외 계층도 : https://docs.python.org/3/library/exceptions.html#exception-hierarchy참조
		BaseException
		 +-- SystemExit
		 +-- KeyboardInterrupt
		 +-- GeneratorExit
		 +-- Exception
			  +-- StopIteration
			  +-- StopAsyncIteration
			  +-- ArithmeticError
			  |    +-- FloatingPointError
			  |    +-- OverflowError
			  |    +-- ZeroDivisionError
			  +-- AssertionError
			  +-- AttributeError
			  +-- BufferError
			  +-- EOFError
			  +-- ImportError
			  |    +-- ModuleNotFoundError
			  +-- LookupError
			  |    +-- IndexError
			  |    +-- KeyError
			  +-- MemoryError
			  +-- NameError
			  |    +-- UnboundLocalError
			  +-- OSError
			  |    +-- BlockingIOError
			  |    +-- ChildProcessError
			  |    +-- ConnectionError
			  |    |    +-- BrokenPipeError
			  |    |    +-- ConnectionAbortedError
			  |    |    +-- ConnectionRefusedError
			  |    |    +-- ConnectionResetError
			  |    +-- FileExistsError
			  |    +-- FileNotFoundError
			  |    +-- InterruptedError
			  |    +-- IsADirectoryError
			  |    +-- NotADirectoryError
			  |    +-- PermissionError
			  |    +-- ProcessLookupError
			  |    +-- TimeoutError
			  +-- ReferenceError
			  +-- RuntimeError
			  |    +-- NotImplementedError
			  |    +-- RecursionError
			  +-- SyntaxError
			  |    +-- IndentationError
			  |         +-- TabError
			  +-- SystemError
			  +-- TypeError
			  +-- ValueError
			  |    +-- UnicodeError
			  |         +-- UnicodeDecodeError
			  |         +-- UnicodeEncodeError
			  |         +-- UnicodeTranslateError
			  +-- Warning
				   +-- DeprecationWarning
				   +-- PendingDeprecationWarning
				   +-- RuntimeWarning
				   +-- SyntaxWarning
				   +-- UserWarning
				   +-- FutureWarning
				   +-- ImportWarning
				   +-- UnicodeWarning
				   +-- BytesWarning
				   +-- ResourceWarning
	3. 예외 발생시키기
	
		raise Exception([에러메시지])
		
	4.나만의 예외 만들기
		4-1. Exception를 상속받는다
		
		4-2. __init__메소드안에서 부모인 Exception의 __init__()메소드를 호출하면서 
		     인수로 예외메시지를 전달한다.
			 
			 
			class 예외클래스명(Exception):
				def __init__(self):
					super().__init__(예외메시지)
					
			
			raise 예외클래스명
					
			혹은
			
			class 예외클래스명(Exception):  
				pass                               
				
			raise 예외클래스명(예외메시지)
				

				